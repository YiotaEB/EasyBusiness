package eb_managementapp.UI.Forms;

import Utilities.HTTPConnection;
import static eb_managementapp.EB_ManagementApp.mainForm;
import static eb_managementapp.EB_ManagementApp.setUpForm;
import eb_managementapp.Entities.Countries;
import eb_managementapp.Entities.Userlevels;
import eb_managementapp.Entities.Users;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;

public class AddUsersForm extends javax.swing.JFrame {

    final String TITLE = "Add Employee";
    private ArrayList<Users> usersList;
    private ArrayList<Countries> countriesList;
    private ArrayList<Userlevels> positionsList;
    private String sessionID;

    private JFrame sender;
    
    public AddUsersForm(JFrame sender) {
        initComponents();
        
        sessionID = AdminForm.readSetting(LoginForm.SESSION_FILENAME);
        if (sessionID == null) {
            new LoginForm();
            this.setVisible(false);
        }
        
        ImageIcon imageIcon = new ImageIcon("C:\\Users\\panay\\Desktop\\EasyBusiness\\EB_ManagementApp\\src\\eb_managementapp\\UI\\Images\\mini_logo.fw.png");
        setIconImage(imageIcon.getImage());
        
        this.sender = sender;

        getCountries();
        getPositions();
        getUsers();
        
        setTitle(TITLE);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        employeeDetailsPanel = new javax.swing.JPanel();
        employeeNameLabel = new javax.swing.JLabel();
        employeeNameTextField = new javax.swing.JTextField();
        employeeLastNameLabel = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        employeeTelephoneLabel = new javax.swing.JLabel();
        employeeTelephoneTextField = new javax.swing.JTextField();
        employeeAddressLabel = new javax.swing.JLabel();
        employeeAddressTextField = new javax.swing.JTextField();
        employeeCityLabel = new javax.swing.JLabel();
        employeeCityTextField = new javax.swing.JTextField();
        countryLabel = new javax.swing.JLabel();
        countryComboBox = new javax.swing.JComboBox<>();
        employmentDetailsPanel = new javax.swing.JPanel();
        positionLabel = new javax.swing.JLabel();
        positionComboBox = new javax.swing.JComboBox<>();
        hireDateLabel = new javax.swing.JLabel();
        dateOfHirePicker = new org.jdesktop.swingx.JXDatePicker();
        addNewEmployeesButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        viewEmployeesPanel = new javax.swing.JPanel();
        employeesScrollPane = new javax.swing.JScrollPane();
        employeesTable = new javax.swing.JTable();
        viewEmployeesButton = new javax.swing.JButton();

        setTitle("Easy Business - Add Employees");
        setResizable(false);

        employeeDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(153, 153, 153))); // NOI18N

        employeeNameLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        employeeNameLabel.setText("Name:");

        employeeNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeNameTextFieldActionPerformed(evt);
            }
        });

        employeeLastNameLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        employeeLastNameLabel.setText("Last Name:");

        lastNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameTextFieldActionPerformed(evt);
            }
        });

        employeeTelephoneLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        employeeTelephoneLabel.setText("Telephone:");

        employeeTelephoneTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeTelephoneTextFieldActionPerformed(evt);
            }
        });

        employeeAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        employeeAddressLabel.setText("Address:");

        employeeAddressTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeAddressTextFieldActionPerformed(evt);
            }
        });

        employeeCityLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        employeeCityLabel.setText("City:");

        employeeCityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeCityTextFieldActionPerformed(evt);
            }
        });

        countryLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        countryLabel.setText("Country:");

        countryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout employeeDetailsPanelLayout = new javax.swing.GroupLayout(employeeDetailsPanel);
        employeeDetailsPanel.setLayout(employeeDetailsPanelLayout);
        employeeDetailsPanelLayout.setHorizontalGroup(
            employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeeDetailsPanelLayout.createSequentialGroup()
                .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employeeDetailsPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(employeeNameLabel)
                            .addComponent(employeeLastNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(employeeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(employeeDetailsPanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(employeeTelephoneLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(employeeTelephoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(employeeDetailsPanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(employeeAddressLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(employeeAddressTextField)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeeDetailsPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeeDetailsPanelLayout.createSequentialGroup()
                                    .addComponent(employeeCityLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                .addGroup(employeeDetailsPanelLayout.createSequentialGroup()
                                    .addComponent(countryLabel)
                                    .addGap(10, 10, 10)))
                            .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(countryComboBox, 0, 175, Short.MAX_VALUE)
                                .addComponent(employeeCityTextField)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        employeeDetailsPanelLayout.setVerticalGroup(
            employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeeDetailsPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeLastNameLabel))
                .addGap(11, 11, 11)
                .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeTelephoneLabel)
                    .addComponent(employeeTelephoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeAddressLabel)
                    .addComponent(employeeAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeCityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeCityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(employeeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(countryLabel)
                    .addComponent(countryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        employmentDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employment  Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(153, 153, 153))); // NOI18N

        positionLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        positionLabel.setText("Position:");

        positionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        positionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionComboBoxActionPerformed(evt);
            }
        });

        hireDateLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        hireDateLabel.setText("Hire Date:");

        dateOfHirePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateOfHirePickerActionPerformed(evt);
            }
        });

        addNewEmployeesButton.setText("Add New Employees");
        addNewEmployeesButton.setActionCommand("Add New Employees");
        addNewEmployeesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewEmployeesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout employmentDetailsPanelLayout = new javax.swing.GroupLayout(employmentDetailsPanel);
        employmentDetailsPanel.setLayout(employmentDetailsPanelLayout);
        employmentDetailsPanelLayout.setHorizontalGroup(
            employmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employmentDetailsPanelLayout.createSequentialGroup()
                .addGroup(employmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employmentDetailsPanelLayout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(addNewEmployeesButton))
                    .addGroup(employmentDetailsPanelLayout.createSequentialGroup()
                        .addGroup(employmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(employmentDetailsPanelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(positionLabel))
                            .addGroup(employmentDetailsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(hireDateLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(employmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateOfHirePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(positionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        employmentDetailsPanelLayout.setVerticalGroup(
            employmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employmentDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(employmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(positionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(employmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hireDateLabel)
                    .addComponent(dateOfHirePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(addNewEmployeesButton)
                .addGap(11, 11, 11))
        );

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        nextButton.setText("OK");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(nextButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        viewEmployeesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "List of Employees", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(153, 153, 153))); // NOI18N

        employeesScrollPane.setViewportView(employeesTable);

        viewEmployeesButton.setText("Refresh list");
        viewEmployeesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEmployeesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewEmployeesPanelLayout = new javax.swing.GroupLayout(viewEmployeesPanel);
        viewEmployeesPanel.setLayout(viewEmployeesPanelLayout);
        viewEmployeesPanelLayout.setHorizontalGroup(
            viewEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewEmployeesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewEmployeesPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(viewEmployeesButton)))
                .addContainerGap())
        );
        viewEmployeesPanelLayout.setVerticalGroup(
            viewEmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewEmployeesPanelLayout.createSequentialGroup()
                .addComponent(employeesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewEmployeesButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(employeeDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(employmentDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewEmployeesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(employeeDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(employmentDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(viewEmployeesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void employeeNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeNameTextFieldActionPerformed

    private void lastNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameTextFieldActionPerformed

    private void employeeTelephoneTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeTelephoneTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeTelephoneTextFieldActionPerformed

    private void employeeCityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeCityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeCityTextFieldActionPerformed

    private void employeeAddressTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeAddressTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeAddressTextFieldActionPerformed

    private void dateOfHirePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateOfHirePickerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateOfHirePickerActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
        if (sender != null){
            if (sender instanceof SetUpForm){
                setUpForm = new SetUpForm(this);
            }else if (sender instanceof MainForm){
            }
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void viewEmployeesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEmployeesButtonActionPerformed
        getUsers();
    }//GEN-LAST:event_viewEmployeesButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        this.setVisible(false);
        if (sender != null){
            if (sender instanceof SetUpForm){
                setUpForm = new SetUpForm(this);
            }else if (sender instanceof MainForm){
                
            }
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void positionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_positionComboBoxActionPerformed

    private void addNewEmployeesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewEmployeesButtonActionPerformed
        addUser();
    }//GEN-LAST:event_addNewEmployeesButtonActionPerformed

    private void addUser() {

        //Get field values:
        String firstname = employeeNameTextField.getText().toString();
        String lastname = lastNameTextField.getText().toString();
        String username = firstname.charAt(0) + lastname;
        String city = employeeCityTextField.getText().toString();
        String address = employeeCityTextField.getText().toString();
        String telephone = employeeTelephoneTextField.getText().toString();
        int countryID = countriesList.get(countryComboBox.getSelectedIndex()).getID();
        int positionID = positionsList.get(positionComboBox.getSelectedIndex()).getUserLevelID();
        Date dateHiredDate = dateOfHirePicker.getDate();
        long dateHired = 0;
        if (dateHiredDate != null) {
            dateHired = dateHiredDate.getTime();
        }
        else {
             showMessageDialog(null, "Please provide a valid date", "Invalid Date", JOptionPane.PLAIN_MESSAGE);
        }

        //Check if the firstname is valid
        if (firstname.trim().isEmpty()) {
            showMessageDialog(null, "Please provide a valid firstname", "Invalid Firstname", JOptionPane.PLAIN_MESSAGE);
            return;
        }

        //Check if the lastname is valid
        if (lastname.trim().isEmpty()) {
            showMessageDialog(null, "Please provide a valid lastname", "Invalid lastname", JOptionPane.PLAIN_MESSAGE);
            return;
        }

        //Make the call:
        String addUsersJSON = HTTPConnection.executePost(HTTPConnection.API_URL, "Users", "Create",
                "SessionID=" + sessionID + "&UserID=1&Firstname=" + firstname + "&Lastname=" + lastname + "&Username=" + username
                + "&City=" + city + "&Address=" + address + "&Telephone=" + telephone + "&CountryID=" + countryID
                + "&UserLevelID=" + positionID + "&Password= " + "&DateHired=" + dateHired
        );
        try {
            JSONObject jsonObject = new JSONObject(addUsersJSON);
            final String status = jsonObject.getString("Status");
            final String title = jsonObject.getString("Title");
            final String message = jsonObject.getString("Message");

            showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);

            if (status.equals(HTTPConnection.RESPONSE_OK)) {
                //Reset fields:
                setVisible(true);
                countryComboBox.setSelectedIndex(0);
                employeeNameTextField.setText("");
                lastNameTextField.setText("");
                employeeCityTextField.setText("");
                employeeAddressTextField.setText("");
                employeeTelephoneTextField.setText("");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        getUsers();
    }

    public void getUsers() {
        usersList = new ArrayList<>();
        viewEmployeesButton.setEnabled(false);

        long dateHiredLong = 0;
        
        //Get customers from api
        String usersJSON = HTTPConnection.executePost(HTTPConnection.API_URL, "Users", "GetMultiple", "SessionID=" + sessionID + "");
        try {
            JSONObject jsonObject = new JSONObject(usersJSON);
            final String status = jsonObject.getString("Status");
            final String title = jsonObject.getString("Title");
            final String message = jsonObject.getString("Message");
            
            if (status.equals(HTTPConnection.RESPONSE_OK)) {
                JSONArray dataArray = jsonObject.getJSONArray("Data");
                for (int i = 0; i < dataArray.length(); i++) {
                    JSONObject currentItem = dataArray.getJSONObject(i);

                    int userID = currentItem.getInt("UserID");
                    String username = currentItem.getString("Username");
                    String firstname = currentItem.getString("Firstname");
                    String lastname = currentItem.getString("Lastname");
                    String password = currentItem.getString("Password");
                    dateHiredLong = currentItem.getLong("DateHired");

                    int countryID = currentItem.getInt("CountryID");
                    String city = currentItem.getString("City");
                    String telephone = currentItem.getString("Telephone");
                    String address = currentItem.getString("Address");
                    int userLevelID = currentItem.getInt("UserLevelID");

                    Users user = new Users(userID, username, password, userLevelID, firstname, lastname, dateHiredLong, city, address, telephone, countryID);
                    usersList.add(user);
                }
            } else {
                showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        //Create a new model for the table:
        DefaultTableModel employeesTableModel = new DefaultTableModel();

//        SimpleDateFormat format = new SimpleDateFormat();
//        String date = format.format(new Date(dateHiredLong));

        //Add the table columns:
        employeesTableModel.addColumn("Username");
        employeesTableModel.addColumn("Firstname");
        employeesTableModel.addColumn("Lastname");
        employeesTableModel.addColumn("Position");
        employeesTableModel.addColumn("Date Hired");
        employeesTableModel.addColumn("Telephone");

        //Add each item in the list as a row in the table:
        for (int i = 0; i < usersList.size(); i++) {

            //Put position in the Table
            String position = "";
            for (int j = 0; j < positionsList.size(); j++) {
                if (usersList.get(i).getUserLevelID() == positionsList.get(j).getUserLevelID()) {
                    position = positionsList.get(j).getUserLevelName();
                    break;
                }
            }
            
            Timestamp timestamp = new Timestamp(usersList.get(i).getDateHired());
            Date date = new Date(timestamp.getTime());

            Object[] currentRow = {
                usersList.get(i).getUsername(),
                usersList.get(i).getFirstname(),
                usersList.get(i).getLastname(),
                position,
                Users.DATE_FORMAT.format(date),
                usersList.get(i).getTelephone(),};
            employeesTableModel.addRow(currentRow);
        }
        employeesTable.setModel(employeesTableModel);
        viewEmployeesButton.setEnabled(true);
    }

    public void getCountries() {
        countriesList = new ArrayList<>();
        countryComboBox.removeAllItems();

        //Get customers from api
        String countriesJSON = HTTPConnection.executePost(HTTPConnection.API_URL, "Countries", "GetMultiple", "");
        try {
            JSONObject jsonObject = new JSONObject(countriesJSON);
            final String status = jsonObject.getString("Status");
            final String title = jsonObject.getString("Title");
            final String message = jsonObject.getString("Message");

            if (status.equals(HTTPConnection.RESPONSE_OK)) {
                JSONArray dataArray = jsonObject.getJSONArray("Data");
                for (int i = 0; i < dataArray.length(); i++) {
                    JSONObject currentItem = dataArray.getJSONObject(i);

                    int id = currentItem.getInt("ID");
                    String name = currentItem.getString("Name");

                    Countries c = new Countries(id, name);
                    countriesList.add(c);
                }
            } else {
                showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        for (int i = 0; i < countriesList.size(); i++) {
            countryComboBox.addItem(countriesList.get(i).getName());
        }

    }

    public void getPositions() {
        positionsList = new ArrayList<>();
        positionComboBox.removeAllItems();

        //Get customers from api
        String positionsJSON = HTTPConnection.executePost(HTTPConnection.API_URL, "Userlevels", "GetMultiple", "SessionID=" + sessionID + "");
        try {
            JSONObject jsonObject = new JSONObject(positionsJSON);
            final String status = jsonObject.getString("Status");
            final String title = jsonObject.getString("Title");
            final String message = jsonObject.getString("Message");

            if (status.equals(HTTPConnection.RESPONSE_OK)) {
                JSONArray dataArray = jsonObject.getJSONArray("Data");
                for (int i = 0; i < dataArray.length(); i++) {
                    JSONObject currentItem = dataArray.getJSONObject(i);

                    int id = currentItem.getInt("UserLevelID");
                    String name = currentItem.getString("UserLevelName");
                    boolean show;
                    int showInt = currentItem.getInt("Show");
                    if (showInt > 0) {
                        show = true;
                    } else {
                        show = false;
                    }
                    Userlevels u = new Userlevels(id, name, show);
                    positionsList.add(u);
                   
                }
            } else {
                showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        for (int i = 0; i < positionsList.size(); i++) {
            positionComboBox.addItem(positionsList.get(i).getUserLevelName());
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddUsersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddUsersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddUsersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddUsersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddUsersForm(new JFrame()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewEmployeesButton;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> countryComboBox;
    private javax.swing.JLabel countryLabel;
    private org.jdesktop.swingx.JXDatePicker dateOfHirePicker;
    private javax.swing.JLabel employeeAddressLabel;
    private javax.swing.JTextField employeeAddressTextField;
    private javax.swing.JLabel employeeCityLabel;
    private javax.swing.JTextField employeeCityTextField;
    private javax.swing.JPanel employeeDetailsPanel;
    private javax.swing.JLabel employeeLastNameLabel;
    private javax.swing.JLabel employeeNameLabel;
    private javax.swing.JTextField employeeNameTextField;
    private javax.swing.JLabel employeeTelephoneLabel;
    private javax.swing.JTextField employeeTelephoneTextField;
    private javax.swing.JScrollPane employeesScrollPane;
    private javax.swing.JTable employeesTable;
    private javax.swing.JPanel employmentDetailsPanel;
    private javax.swing.JLabel hireDateLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JButton nextButton;
    private javax.swing.JComboBox<String> positionComboBox;
    private javax.swing.JLabel positionLabel;
    private javax.swing.JButton viewEmployeesButton;
    private javax.swing.JPanel viewEmployeesPanel;
    // End of variables declaration//GEN-END:variables
}
